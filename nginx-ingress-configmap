#!/usr/bin/env python3
from sys import argv
from os import environ
import ipaddress
from kubernetes import client, config

# Minimum address prefix to use. Use 32 to disable.
# You can block whole subnets with single IP input from fail2ban, e.g. with =24:
# $ ./nginx-ingress-configmap namespace/configmap add 1.1.1.1
# will block 1.1.1.0/24
MIN_PREFIX = 24

class CM:
  CM_STREAM_SNIPPET = 'stream-snippet'
  CM_COMMENT = '#auto-managed-record-do-not-edit'

  def __init__(self, path, prefix=None):
    self.prefix = prefix
    try:
      self.namespace, self.name = path.split('/')
    except ValueError as e:
      raise Exception('incorrect configmap path: ' + path)

    try:
      if 'KUBERNETES_SERVICE_HOST' in environ:
        config.load_incluster_config()
      else:
        config.load_kube_config()
      self.api = client.CoreV1Api()
      self.cm = self.api.read_namespaced_config_map(name=self.name, namespace=self.namespace)
      self._parse_snippet()
    except Exception as e:
      raise Exception('init kubertetes API or parse configmap: ' + str(e))

  def _parse_snippet(self):
    self.ips = []
    self.snippet = []
    if CM.CM_STREAM_SNIPPET in self.cm.data:
      for line in self.cm.data[CM.CM_STREAM_SNIPPET].split("\n"):
        split = line.split()
        if len(split) >= 3 and split[0] == 'deny' and split[2] == CM.CM_COMMENT:
          self.ips.append(self._cidr(split[1].strip(';')))
        elif line.strip() != '':
          self.snippet.append(line.strip())

  def _replace_configmap(self):
    try:
      for i in self.ips:
        self.snippet.append(f'deny {i}; {CM.CM_COMMENT}')
      self.cm.data[CM.CM_STREAM_SNIPPET] = "\n".join(self.snippet)
      self.api.replace_namespaced_config_map(self.name, self.namespace, self.cm)
    except Exception as e:
      raise Exception('replace configmap: ' + str(e))

  def _cidr(self, ip):
    try:
      cidr = ipaddress.ip_network(ip.strip(), strict=False)
      if cidr.prefixlen > self.prefix:
        cidr = cidr.supernet(new_prefix=self.prefix)
      return str(cidr)
    except ValueError:
      raise Exception(f'incorrect IP address/network: {ip}')

  def list(self):
    for ip in self.ips:
      print(ip)

  def flush(self):
    self.ips = []
    self._replace_configmap()

  def add(self, ip):
    ip_add = self._cidr(ip)
    if ip_add in self.ips:
      print(f'{ip_add} already in the deny list')
    else:
      self.ips.append(str(ip_add))
      self._replace_configmap()

  def delete(self, ip):
    ip_del = self._cidr(ip)
    if ip_del in self.ips:
      self.ips.remove(ip_del)
      self._replace_configmap()
    else:
      print(f'{ip} not in the deny list')

def usage_exit():
  print(f'Usage: {argv[0]} namespace/configmap (add <ip[/network>] | delete <ip[/network>] | list | flush)')
  exit(1)

def main():
  try:
    cm_path = argv[1]
    command = argv[2]
    if command in ['add', 'delete']:
      ip = argv[3]
  except IndexError:
    usage_exit()

  try:
    cm = CM(cm_path, MIN_PREFIX)
    if command == 'list':
      cm.list()
    elif command == 'flush':
      cm.flush()
    elif command == 'add':
      cm.add(ip)
    elif command == 'delete':
      cm.delete(ip)
    else:
      usage_exit()
  except Exception as e:
    print('ERROR: ' + str(e))
    exit(1)

if __name__ == '__main__':
  main()
